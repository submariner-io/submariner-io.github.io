<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Submariner k8s project documentation website</title>
    <link>/</link>
    <description>Recent content on Submariner k8s project documentation website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 15 May 2020 15:30:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docs Style Guide</title>
      <link>/contributing/website/style_guide/</link>
      <pubDate>Wed, 29 Apr 2020 19:09:55 +0200</pubDate>
      
      <guid>/contributing/website/style_guide/</guid>
      <description>Documentation Style Guide This guide is meant to help keep our documentation consistent and ease the contribution and review process.
Submariner follows the Kubernetes Documentation Style Guide wherever relevant. This is a Submariner-specific extension of those practices.
Submariner.io word list A list of Submariner-specific terms and words to be used consistently across the site.
   Term Usage     Submariner The project name Submariner should always be capitalized.</description>
    </item>
    
    <item>
      <title>subctl</title>
      <link>/deployment/subctl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/deployment/subctl/</guid>
      <description>subctl is a command line utility designed to simplify the deployment and maintenance of Submariner across your clusters.
Synopsis subctl [command] [--flags] ...
Description subctl helps to automate the deployment of the Submariner operator, thereby reducing the possibility of mistakes during the process.
subctl connects to specified cluster(s) and performs the requested command.
Commands deploy-broker subctl deploy-broker [flags]
The deploy-broker command configures the cluster specified by the --kubeconfig flag (or KUBECONFIG env var) and the --kubecontext flag as the Broker.</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/openshift/create_clusters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/openshift/create_clusters/</guid>
      <description>Create and deploy cluster A In this step you will deploy cluster A, with the default IP CIDRs
   Pod CIDR Service CIDR     10.128.0.0/14 172.30.0.0/16    openshift-install create install-config --dir cluster-a openshift-install create cluster --dir cluster-a The create cluster step will take some time, you can create Cluster B in parallel if you wish.
Create and deploy cluster B In this step you will deploy cluster B, modifying the default IP CIDRs</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/openshift/ready_clusters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/openshift/ready_clusters/</guid>
      <description>Make your clusters ready for submariner Submariner gateway nodes need to be able to accept traffic over ports 4500/UDP and 500/UDP when using IPSEC. In addition we use port 4800/UDP to encapsulate traffic from the worker nodes to the gateway nodes and ensuring that Pod IP addresses are preserved.
Additionally, the default Openshift deployments don&amp;rsquo;t allow assigning an elastic public IP to existing worker nodes, something that it&amp;rsquo;s necessary at least on one end of the IPSEC connections.</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/openshift/setup_openshift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/openshift/setup_openshift/</guid>
      <description>AWS openshift-install and pull-secret Download the openshift-install and oc tools, and copy your pull secret from:
 https://cloud.redhat.com/openshift/install/aws/installer-provisioned
 Find more detailed instructions here:
 https://docs.openshift.com/container-platform/4.3/installing/installing_aws/installing-aws-default.html
 Make sure the aws cli is properly installed and configured Installation instructions
 https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html
 $ aws configure AWS Access Key ID [None]: .... AWS Secret Access Key [None]: .... Default region name [None]: .... Default output format [None]: text See also for more details:</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/rancher/create_clusters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/rancher/create_clusters/</guid>
      <description>Create and Deploy Cluster A In this step you will deploy cluster A, with the default IP CIDRs
   Pod CIDR Service CIDR     10.42.0.0/16 10.43.0.0/16    Use the Rancher UI to create a cluster, leaving the default options selected.
Make sure you create at least one node that has a publicly accessible IP with the label submariner.io/gateway: &amp;quot;true&amp;quot;, either via node pool or via a custom node registration command.</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/rancher/prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/rancher/prerequisites/</guid>
      <description>Prerequisites These instructions were developed with Rancher v2.4.x
Make sure you are familiar with Rancher, and creating clusters. You can create either node driver clusters or Custom clusters, as long as your designated gateway nodes can communicate with each other.</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/verify_with_discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/verify_with_discovery/</guid>
      <description>Verify Deployment To verify the deployment follow the steps below which creates an nginx service and ServiceExport for it.
export KUBECONFIG=cluster-b/auth/kubeconfig kubectl -n default create deployment nginx --image=nginxinc/nginx-unprivileged:stable-alpine kubectl -n default expose deployment nginx --port=8080 subctl export service --namespace default nginx export KUBECONFIG=cluster-a/auth/kubeconfig kubectl -n default run --generator=run-pod/v1 tmp-shell --rm -i --tty --image quay.io/submariner/nettest -- /bin/bash curl nginx.default.svc.supercluster.local:8080 Perform automated verification This will perform all automated verification between your clusters</description>
    </item>
    
  </channel>
</rss>