<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Submariner k8s project documentation website</title>
    <link>/</link>
    <description>Recent content on Submariner k8s project documentation website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 24 Aug 2020 11:35:16 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docs Style Guide</title>
      <link>/contributing/website/style_guide/</link>
      <pubDate>Wed, 29 Apr 2020 19:09:55 +0200</pubDate>
      
      <guid>/contributing/website/style_guide/</guid>
      <description>Documentation Style Guide This guide is meant to help keep our documentation consistent and ease the contribution and review process.
Submariner follows the Kubernetes Documentation Style Guide wherever relevant. This is a Submariner-specific extension of those practices.
Submariner.io Word List A list of Submariner-specific terms and words to be used consistently across the site.
   Term Usage     Admiral The project name Admiral should always be capitalized.</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/openshift/create_clusters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/openshift/create_clusters/</guid>
      <description>Create and Deploy cluster-a In this step you will deploy cluster-a using the default IP CIDR ranges:
   Pod CIDR Service CIDR     10.128.0.0/14 172.30.0.0/16    openshift-install create install-config --dir cluster-a openshift-install create cluster --dir cluster-a When the cluster deployment completes, directions for accessing your cluster, including a link to its web console and credentials for the kubeadmin user, display in your terminal.</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/openshift/download_prep_for_subm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/openshift/download_prep_for_subm/</guid>
      <description>Submariner gateway nodes need to be able to accept traffic over UDP ports (4500 and 500 by default) when using IPsec. Submariner also uses UDP port 4800 to encapsulate traffic from the worker nodes to the gateway nodes. Additionally, the default OpenShift deployment does not allow assigning an elastic public IP to existing worker nodes, which may be necessary on one end of the IPsec connection.
prep_for_subm is a script designed to update your OpenShift installer provisioned AWS infrastructure for Submariner deployments, handling the requirements specified above.</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/openshift/run_prep_for_subm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/openshift/run_prep_for_subm/</guid>
      <description>Run the prep_for_subm.sh script for cluster-a and cluster-b:  ./prep_for_subm.sh cluster-a # respond &amp;#34;yes&amp;#34; when Terraform asks for approval, or otherwise add the -auto-approve flag ./prep_for_subm.sh cluster-b # respond &amp;#34;yes&amp;#34; when Terraform asks for approval, or otherwise add the -auto-approve flag Note that certain parameters, such as the IPsec UDP ports and AWS instance type for the gateway, can be customized before running the script. For example:
export IPSEC_NATT_PORT=4501 export IPSEC_IKE_PORT=501 export GW_INSTANCE_TYPE=m4.</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/openshift/setup_aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/openshift/setup_aws/</guid>
      <description>Setup Your AWS Profile Configure the AWS CLI with the settings required to interact with AWS. These include your security credentials, the default AWS Region, and the default output format:
$ aws configure AWS Access Key ID [None]: .... AWS Secret Access Key [None]: .... Default region name [None]: .... Default output format [None]: text </description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/openshift/setup_openshift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/openshift/setup_openshift/</guid>
      <description>Prerequisites Before we begin, the following tools need to be downloaded and added to your $PATH:
 OpenShift installer, pull secret, and command line interface. All can be downloaded from here. AWS CLI which can be downloaded from here.  </description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/rancher/create_clusters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/rancher/create_clusters/</guid>
      <description>Create and Deploy Cluster A In this step you will deploy cluster A, with the default IP CIDRs
   Pod CIDR Service CIDR     10.42.0.0/16 10.43.0.0/16    Use the Rancher UI to create a cluster, leaving the default options selected.
Make sure you create at least one node that has a publicly accessible IP with the label submariner.io/gateway: &amp;quot;true&amp;quot;, either via node pool or via a custom node registration command.</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/rancher/prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/rancher/prerequisites/</guid>
      <description>Prerequisites These instructions were developed with Rancher v2.4.x
Make sure you are familiar with Rancher, and creating clusters. You can create either node driver clusters or Custom clusters, as long as your designated gateway nodes can communicate with each other.</description>
    </item>
    
    <item>
      <title></title>
      <link>/quickstart/verify_with_discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/quickstart/verify_with_discovery/</guid>
      <description>Verify Deployment To manually verify the deployment, follow the steps below using either a headless or ClusterIP nginx service deployed in cluster-b.
Deploy ClusterIP Service export KUBECONFIG=cluster-b/auth/kubeconfig kubectl -n default create deployment nginx --image=nginxinc/nginx-unprivileged:stable-alpine kubectl -n default expose deployment nginx --port=8080 subctl export service --namespace default nginx Deploy Headless Service Note that headless Services can only be exported on non-globalnet deployments.
export KUBECONFIG=cluster-b/auth/kubeconfig kubectl -n default create deployment nginx --image=nginxinc/nginx-unprivileged:stable-alpine kubectl -n default expose deployment nginx --port=8080 --cluster-ip=None subctl export service --namespace default nginx Verify Run nettest from cluster-a to access the nginx service:</description>
    </item>
    
  </channel>
</rss>